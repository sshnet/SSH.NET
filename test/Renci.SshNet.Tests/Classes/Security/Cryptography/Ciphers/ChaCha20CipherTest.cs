using System.Linq;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using Renci.SshNet.Security.Cryptography.Ciphers;
using Renci.SshNet.Tests.Common;

namespace Renci.SshNet.Tests.Classes.Security.Cryptography.Ciphers
{
    /// <summary>
    ///
    /// </summary>
    [TestClass]
    public class ChaCha20CipherTest : TestBase
    {
        [TestMethod]
        public void Test_Cipher_ChaCha20()
        {
            var input1 = new byte[]
            {
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0
            };

            var key1 = new byte[]
            {
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0
            };

            var nonce1 = new byte[]
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

            uint counter1 = 0;

            var expected1 = new byte[]
            {
                0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90,
                0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28,
                0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a,
                0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7,
                0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48, 0x8d,
                0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37,
                0x6a, 0x43, 0xb8, 0xf4, 0x15, 0x18, 0xa1, 0x1c,
                0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86
            };

            var input2 = new byte[]
            {
                0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
                0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
                0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20,
                0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
                0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39,
                0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
                0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
                0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
                0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20,
                0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
                0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75,
                0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
                0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f,
                0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
                0x74, 0x2e
            };

            var key2 = new byte[]
            {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
            };

            var nonce2 = new byte[]
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00
            };

            uint counter2 = 1;

            var expected2 = new byte[]
            {
                0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80,
                0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
                0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2,
                0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
                0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab,
                0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
                0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab,
                0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
                0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61,
                0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
                0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06,
                0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
                0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6,
                0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
                0x87, 0x4d
            };

            var input3 = new byte[]
            {
                0x27, 0x54, 0x77, 0x61, 0x73, 0x20, 0x62, 0x72,
                0x69, 0x6c, 0x6c, 0x69, 0x67, 0x2c, 0x20, 0x61,
                0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
                0x6c, 0x69, 0x74, 0x68, 0x79, 0x20, 0x74, 0x6f,
                0x76, 0x65, 0x73, 0x0a, 0x44, 0x69, 0x64, 0x20,
                0x67, 0x79, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64,
                0x20, 0x67, 0x69, 0x6d, 0x62, 0x6c, 0x65, 0x20,
                0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77,
                0x61, 0x62, 0x65, 0x3a, 0x0a, 0x41, 0x6c, 0x6c,
                0x20, 0x6d, 0x69, 0x6d, 0x73, 0x79, 0x20, 0x77,
                0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
                0x62, 0x6f, 0x72, 0x6f, 0x67, 0x6f, 0x76, 0x65,
                0x73, 0x2c, 0x0a, 0x41, 0x6e, 0x64, 0x20, 0x74,
                0x68, 0x65, 0x20, 0x6d, 0x6f, 0x6d, 0x65, 0x20,
                0x72, 0x61, 0x74, 0x68, 0x73, 0x20, 0x6f, 0x75,
                0x74, 0x67, 0x72, 0x61, 0x62, 0x65, 0x2e
            };

            var key3 = new byte[]
            {
                0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a,
                0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0,
                0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09,
                0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0
            };

            var nonce3 = new byte[]
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02
            };

            uint counter3 = 42;

            var expected3 = new byte[]
            {
                0x62, 0xe6, 0x34, 0x7f, 0x95, 0xed, 0x87, 0xa4,
                0x5f, 0xfa, 0xe7, 0x42, 0x6f, 0x27, 0xa1, 0xdf,
                0x5f, 0xb6, 0x91, 0x10, 0x04, 0x4c, 0x0d, 0x73,
                0x11, 0x8e, 0xff, 0xa9, 0x5b, 0x01, 0xe5, 0xcf,
                0x16, 0x6d, 0x3d, 0xf2, 0xd7, 0x21, 0xca, 0xf9,
                0xb2, 0x1e, 0x5f, 0xb1, 0x4c, 0x61, 0x68, 0x71,
                0xfd, 0x84, 0xc5, 0x4f, 0x9d, 0x65, 0xb2, 0x83,
                0x19, 0x6c, 0x7f, 0xe4, 0xf6, 0x05, 0x53, 0xeb,
                0xf3, 0x9c, 0x64, 0x02, 0xc4, 0x22, 0x34, 0xe3,
                0x2a, 0x35, 0x6b, 0x3e, 0x76, 0x43, 0x12, 0xa6,
                0x1a, 0x55, 0x32, 0x05, 0x57, 0x16, 0xea, 0xd6,
                0x96, 0x25, 0x68, 0xf8, 0x7d, 0x3f, 0x3f, 0x77,
                0x04, 0xc6, 0xa8, 0xd1, 0xbc, 0xd1, 0xbf, 0x4d,
                0x50, 0xd6, 0x15, 0x4b, 0x6d, 0xa7, 0x31, 0xb1,
                0x87, 0xb5, 0x8d, 0xfd, 0x72, 0x8a, 0xfa, 0x36,
                0x75, 0x7a, 0x79, 0x7a, 0xc1, 0x88, 0xd1
            };

            var cipher1 = new ChaCha20Cipher(key1, nonce1, counter1);
            var cipher2 = new ChaCha20Cipher(key2, nonce2, counter2);
            var cipher3 = new ChaCha20Cipher(key3, nonce3, counter3);

            var output1 = cipher1.Encrypt(input1);
            var output2 = cipher2.Encrypt(input2);
            var output3 = cipher3.Encrypt(input3);

            if (!output1.SequenceEqual(expected1))
            {
                Assert.Fail("Invalid encryption");
            }

            if (!output2.SequenceEqual(expected2))
            {
                Assert.Fail("Invalid encryption");
            }

            if (!output3.SequenceEqual(expected3))
            {
                Assert.Fail("Invalid encryption");
            }
        }
    }
}
